generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?        @unique
  password           String?
  role               UserRole       @default(STUDENT)
  image              String?
  accounts           Account[]
  comments           Comment[]
  notifications      Notification[]
  projects           Project[]
  supervisedProjects Project[]      @relation("SupervisorProjects")
  sessions           Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Classlist {
  id           String  @id @default(cuid())
  studentName  String
  studentEmail String  @unique
  matricule    String? @unique
}

model Project {
  id            String        @id @default(cuid())
  title         String
  abstract      String?
  status        ProjectStatus @default(PENDING_REVIEW)
  draftPdfUrl   String?
  finalPdfUrl   String?
  viewCount     Int           @default(0)
  downloadCount Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  publishedAt   DateTime?
  studentId     String
  supervisorId  String?
  reportType    ReportType    @default(FINAL)
  comments      Comment[]
  student       User          @relation(fields: [studentId], references: [id])
  supervisor    User?         @relation("SupervisorProjects", fields: [supervisorId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  projectId String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  message     String
  link        String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  recipientId String
  recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([recipientId])
}

enum UserRole {
  STUDENT
  SUPERVISOR
  ADMIN
}

enum ReportType {
  INTERNSHIP
  FINAL
}

enum ProjectStatus {
  PENDING_REVIEW
  REJECTED
  APPROVED_FOR_FINAL
  PUBLISHED
}
